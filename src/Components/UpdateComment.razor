@using LetsGoPark.WebSite.Models
@using LetsGoPark.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileParksService ParkService
@inject NavigationManager NavigationManager

@code {
    //Parameter list passed in from DeleteComment.cshtml

    //Index of the comment within Comments array
    [Parameter]
    public int CommentIndex { get; set; }
    //String ID related to a park in the database
    [Parameter]
    public string SelectedParkId { get; set; }
    //Name of the comment maker
    [Parameter]
    public string Name { get; set; }
    //Date time the comment was made
    [Parameter]
    public string Datetime { get; set; }
    //Comment contents
    [Parameter]
    public string Description { get; set; }
    //Numeric number associated with the comment
    [Parameter]
    public string Token { get; set; }

    //String versions of parameters
    private string nameString;
    private string datetimeString;
    private string descriptionString;
    private string tokenString;
    private string parkId;
    int commentIndex;

    /// <summary>
    /// Function called upon page render.
    /// Sets the ####String variables.
    /// </summary>
    protected override void OnInitialized()
    {
        nameString = Name.ToString();
        datetimeString = Datetime.ToString();
        descriptionString = Description.ToString();
        tokenString = Token.ToString();
        parkId = SelectedParkId.ToString();
        commentIndex = int.Parse(CommentIndex.ToString());
    }
    }
<!--Body that covers function creating.-->
@functions {
    /// <summary>
    ///This function updates a specified comment.
    /// If the park Id selected isn't valid, the error is caught in UpdateComment().
    /// </summary>
    /// <param name="name"></param>
    /// <param name="dateTime"></param>
    /// <param name="description"></param>
    /// <param name="token"></param>
    /// <param name="parkId"></param>
    /// <param name="commentIndex"></param>
    /// <returns>returns a bool, false if comment wasn't updated and true if it was successfully.</returns>
    bool SubmitUpdatedComment(string name, string dateTime, string description, string token, string parkId, int commentIndex){
        //If any fields are empty, do nothing
        string[] comment = { name.ToString(), dateTime.ToString(), description.ToString(), token.ToString() };
        string newId = parkId.ToString();
        
        //Updates the date time on comment
        comment[1] = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        ParkService.UpdateComment(newId, comment, commentIndex);
        return true;
    }

}

<div class="readpageformat">
    <p>
        Original Comment on @parkId: <br />
            @nameString <sp />
            @datetimeString<br />
            @descriptionString <br /><br />
        Update your comment below:
    </p>

    <form method="get" @onsubmit="@(e => {SubmitUpdatedComment(nameString, datetimeString, descriptionString, tokenString, parkId, commentIndex);})">
            <div>
                <label for="name-input">Name:</label>
            <input type="text" id="name-input" name="name" value="@nameString" @oninput="@((eventArgs) => nameString = eventArgs.Value.ToString())" />
            </div>
            <div>
                <label for="description-input">Description:</label>
            <input type="text" id="description-input" name="description" value="@descriptionString" @oninput="@((eventArgs) => descriptionString = eventArgs.Value.ToString())" />
            </div>
            <div>
                <label for="token-input">Token:</label>
            <input type="text" id="token-input" name="token" value="@Token" @oninput="@((eventArgs) => tokenString = eventArgs.Value.ToString())" />
            </div>
            <button type="submit" @onclick="@(() => NavigationManager.NavigateTo("~/Pages/Explore"))">Update Comment</button>
    </form>

<a href="/Explore" style="z-index: 100;">Back to Explore</a> 
</div>
