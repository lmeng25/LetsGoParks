@using LetsGoPark.WebSite.Models
@using LetsGoPark.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@using LetsGoPark.WebSite.Pages
@inject JsonFileParksService ParkService

<!--The following block creates a dropdown filter that allows a user to filter parks by park system.
-->
<div>
    <span class="readpageformat"><strong>Select a park system</strong> </span>
    <label for="filter-dropdown"></label>
    <select id="filter-dropdown" @onchange="(e => UpdateSelectedFilterOption(e))">
        <option value="">All</option>
            @foreach (var option in filterOptions)
            {
                <option value="@option">@option</option>
            }
    </select>

    <div class="row">
        <div class="col">
            <span class="readpageformat"><strong>Or search for a park </strong></span>
            <input type="text" @onchange="(e) => UpdateFilterText(e.Value.ToString())" value="@FilterDataString" />
            <button @onclick="(e => EnableFilterData())" class="btn btn-success">Search</button>
            <button @onclick="(e => ClearFilterData())" class="btn btn-danger">Clear</button>
        </div>
    </div>
 </div>

<!--The following block creates the grid of user filtered parks in parks.json.
    Shows a grid of cards with the title of the park, the park image, and then a button labelled "More Info".
    If the button "More Info" is selected, a modal window opens that displays all information within the database
    pertaining to the selected park.
-->
<div class="card-columns">
    @{
        var parkListGroup = ParkService.GetParks().Where(x => (string.IsNullOrEmpty(SelectedFilterOption) || x.Park_system == SelectedFilterOption));
        if (FilterData)
        {
            parkListGroup = parkListGroup.Where(x => (x.Id.ToLower().Contains(FilterDataString.ToLower())));
        }
        
        foreach (var park in parkListGroup)
        {
            <div class="card">
                <div class="card-img" style="background-image: url('@park.Image');">
                </div>
                <div class="card-body">
                    <h5 class="card-title">@park.Id</h5>
                </div>
                <div class="card-footer" align: center>
                    <small class="text-muted">
                        <button @onclick="(e => SelectPark(park.Id))" id="MoreInfoButton_@park.Id"
                            data-toggle="modal" data-target="#ParkModal" class="btn btn-primary">
                            More Info
                        </button>
                    </small>
                </div>
            </div>
        }
    }
</div>



<!--The following block of code determines how the page behaves once a park has been selected.
    The Modal window opens an shows the Park Title that functions as a hyperlink to the parks official website.
    It then shows the picture of the park, followed by a hyperlink to its brochure.
    It thenn lists the contact and address information of the park, as well as its descriptions and activities.
-->
@if (selectedPark != null)
{
    <div class="modal fade" id="ParkModal" tabindex="-1" role="dialog" aria-labelledby="ParkTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="ParkTitle"> <a href=@selectedPark.Url><strong>@selectedPark.Id</strong></a></h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedPark.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">
                                <!--Links brochure of selected park-->
                                <a href=@selectedPark.Map_brochure><strong>Park Brochure</strong></a> <br>
                                <!--Loads Address of selected park-->
                                <strong>Address: </strong> @selectedPark.Address <br>
                                <!--Loads Phone number of selected park-->
                                <strong>Phone #: </strong> @selectedPark.Phone <br>
                                <!--Loads park owner of selected park-->
                                <strong>Park System: </strong>@selectedPark.Park_system <br>
                                <!--Loads permits and fees of selected park-->
                                <strong>Permits and Fees: </strong>@selectedPark.Permits <br>
                                <!--Loads Activities array of selected parks-->
                                <strong>Activities: </strong>@selectedPark.Activities <br>
                                <!--Loads Description of selected park-->
                                <strong>Park description:</strong> <br> @selectedPark.Description <br><br>
                                <!--Loads Comments of selected park-->
                                <strong>Comments: </strong> <br>
                                @if (commentCount == 0)
                                {
                                    <span>Be the first to comment!</span>
                                    <br>
                                }
                                else
                                {
                                    <span>@commentCount comments from parkers:</span>
                                    <br>
                                    @foreach (string[] comment in selectedPark.Comments)
                                    {
                                        <!--comment record structure: [User, Time, Comment, Token]-->
                                        <div>
                                            <div>
                                                <em>@comment[0] </em>- @comment[1]:
                                            </div>
                                            <div>
                                                <p>&nbsp;&nbsp;@comment[2]</p>
                                            </div>
                                        </div>
                                        <!--Link to updateComment page-->
                                        <a href="/UpdateComment?commentIndex=@Array.IndexOf(selectedPark.Comments, comment) &selectedParkId=@selectedParkId &name=@comment[0]
                                            &dateTime=@comment[1] &description=@comment[2] &token=@comment[3]">
                                            <u>Update Comment</u>
                                        </a>

                                        <br />

                                        <!--Link to DeleteComment page-->
                                        <a href="/DeleteComment?commentIndex=@Array.IndexOf(selectedPark.Comments, comment) &selectedParkId=@selectedParkId &name=@comment[0]
                                            &dateTime=@comment[1] &description=@comment[2] &token=@comment[3]">
                                            <u>Delete Comment</u>
                                        </a>
                                        <br />
                                        <br />
                                    }
                                    <br>
                                }
                                <!--Add input boxes for writing a comment-->
                                <!--comment record structure: [User, Time, Comment, Token]-->
                                <strong>Write a comment:</strong> <br>

                                <!--Recieves input from user and saves via SubmitComment method. The date is updated in the function.-->
                                <form method="post" @onsubmit="@(e => { SubmitComment(currentComment); })">
                                    <div class="comments">
                                        <!--Saves Name Field-->
                                        <label for="name-input">Name:</label>
                                        <input type="text" id="name-input" name="name" value="@currentComment[0]" @oninput="@((eventArgs) => currentComment[0] = eventArgs.Value.ToString())" />
                                    </div>
                                    <div class="comments">
                                        <!--Saves Comment Field-->
                                        <label for="comment-input">Write Comment:</label>
                                        <textarea id="comment-input" name="comment" @oninput="@((eventArgs) => currentComment[2] = eventArgs.Value.ToString())">@currentComment[2]</textarea>
                                    </div>
                                    <div class="comments">
                                        <!--Saves token Field-->
                                        <label for="token-input">Token For Your Comment:</label>
                                        <input type="text" id="token-input" name="token" value="@currentComment[3]" @oninput="@((eventArgs) => currentComment[3] = eventArgs.Value.ToString())" />
                                    </div>
                                    <button type="submit">Submit</button>
                                </form>

                                

                            </p>
                        </div>
                    </div>
                </div>

                <!--The following block shows the rating for the current park, and allows a user to update the current vote.-->
                <div class="modal-footer">
                    <!--If no votes are currently in json's Ratings array:-->
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    <!--Displays 5 faded stars as backgrounds, and turn them yellow if the park's rating
                        is above the current star number-->
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<!--C# code that is used to dynamically populate HTMl content:-->
@code
{
    // The currently selected park.
    ParksModel selectedPark;
    // The Id of the selected park.
    string selectedParkId;
    // Current comment.
    string[] currentComment = new string[4];
    // The park system filter options
    string[] filterOptions = new string[3] {"National Parks", "WA State Parks", "City Parks"};
    // User selected filter option
    string SelectedFilterOption { get; set; }


    //This function is called once the "More Info" button is clicked in the card grid.
    void SelectPark(string ParkId)
    {
        //Sets the argument Id as the selectedparkId.
        selectedParkId = ParkId;
        //Sets the currently selected park using the selectedParkId.
        selectedPark = ParkService.GetParks().First(x => x.Id == ParkId);
        //Grabs the current rating for the park.
        GetCurrentRating();
        //Grabs the current comment for the park.
        GetCurrentCommentCount();
    }

    //Holds information for the rating of the current park.
    int currentRating = 0;
    //The number of votes currently in a park's Ratings array.
    int voteCount = 0;
    //Is used to set the word displayed as either Vote or Votes depending on the current vote count.
    string voteLabel;

    //This function determines the current rating for the currently selected park.
    void GetCurrentRating()
    {
        //An empty Ratings array is declared as null in the parks.json file.
        if (selectedPark.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedPark.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedPark.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedPark.Id}: {currentRating}");
    }

    //This allows a user to submit a rating vote. It commits that vote to the json database for the currently selected park.
    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedPark.Id}: {rating}");
        ParkService.AddRating(selectedParkId, rating);
        SelectPark(selectedParkId);
        currentComment = new string[4];
    }

    //The number of comments currently in a park's Comments array.
    int commentCount = 0;

    //This function determines the current rating for the currently selected park.
    void GetCurrentCommentCount()
    {
        //An empty Comments array is declared as null in the parks.json file.
        if (selectedPark.Comments == null)
        {
            commentCount = 0;
        }
        else
        {
            commentCount = selectedPark.Comments.Count();
        }
    }

    //This allows a user to submit a comment record. It commits that comment to the json database for the currently selected park.
    bool SubmitComment(string[] comment)
    {
        //If any fields are empty, do nothing
        if (comment[0] == null || comment[2] == null || comment[3] == null)
        {
            return false;
        }
        //Updates the date time on comment
        comment[1] = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        System.Console.WriteLine($"Rating received for {selectedPark.Id}");
        foreach (var item in comment)
        {
            Console.WriteLine(item);
        }
        ParkService.AddComment(selectedParkId, comment);
        SelectPark(selectedParkId);
        return true;
    }

    // Update the selected filter option by user choice
    void UpdateSelectedFilterOption(ChangeEventArgs e)
    {
        SelectedFilterOption = e.Value.ToString();
    }

    string FilterDataString = "";
    bool FilterData = false;

    void UpdateFilterText(string text)
    {
        FilterDataString = text;
    }

    void EnableFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = true;
    }

    void ClearFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = false;
    }
}