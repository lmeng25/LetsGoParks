@using LetsGoPark.WebSite.Models
@using LetsGoPark.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileParksService ParkService

<table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var Park in ParkService.GetParks())
        {
            <tr>
                <td>@Park.Title</td>
                <td>
                    <button @onclick="(e => SelectPark(Park.Id))"
                        data-toggle="modal" data-target="#ParkModal" class="btn btn-primary">
                        Read
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if(selectedPark != null)
{
  <div class="modal fade" id="ParkModal" tabindex="-1" role="dialog" aria-labelledby="ParkTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">
                    <h5 class="modal-title" id="ParkTitle"> <a href=@selectedPark.Url><strong>@selectedPark.Title</strong></a></h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="card">
            <div class="card-img" style="background-image: url('@selectedPark.Image');">
            </div>
            <div class="card-body">
                <p class="card-text">

                                <!--Links brochure of selected park-->
                                <a href=@selectedPark.Map_brochure><strong>Park Brochure</strong></a> <br>
                                <!--Loads Address of selected park-->
                                <strong>Address: </strong> @selectedPark.Address <br>
                                <!--Loads Phone number of selected park-->
                                <strong>Phone #: </strong> @selectedPark.Phone <br>
                                <!--Loads park owner of selected park-->
                                <strong>Park System: </strong>@selectedPark.Park_system <br>
                                <!--Loads permits and fees of selected park-->
                                <strong>Permits and Fees: </strong>@selectedPark.Permits <br>
                                <!--Loads Activities array of selected parks-->
                                <strong>Activities: </strong>
                                <ul>
                                    @foreach (var activity in selectedPark.Activities)
                                    {
                                        <li>@activity</li>
                                    }
                                </ul>
                                
                                <!--Loads Description of selected park--> 
                                <strong>Park description:</strong> <br> @selectedPark.Description <br>

                    
                            </p>
            </div>
          </div>
        </div>
                
        <div class="modal-footer">
          @if(voteCount == 0)
          {
            <span>Be the first to vote!</span>
          }
          else
          {
            <span>@voteCount @voteLabel</span>
          }
          @for(int i=1; i<6; i++)
          {
            var currentStar = i;
            if(i<=currentRating)
            {
              <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
            }
            else
            {
              <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
            }
          }
        </div>
      </div>
    </div>
  </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code 
{
    ParksModel selectedPark;
    string selectedParkId;

    void SelectPark(string ParkId)
    {
        selectedParkId = ParkId;
        selectedPark = ParkService.GetParks().First(x => x.Id == ParkId);
        GetCurrentRating();
    }

    void SelectPark(ParksModel newPark)
    {
        selectedPark = newPark;
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
        if(selectedPark.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedPark.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedPark.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedPark.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedPark.Id}: {rating}");
        ParkService.AddRating(selectedParkId, rating);
        SelectPark(selectedParkId);
    }

    string ActivitiesToString(string[] activities)
    {
        string fullList = "";
        foreach (string activity in activities)
        {
            fullList += activity + " ";
        }
        return fullList;
    }
}
